/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.HospitalAdminWorkArea;

import Business.Caregiver.Caregiver;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.FamilyMemberOrganization;
import Business.Organization.Organization;
import Business.Organization.PatientOrganization;
import Business.Patient.Patient;
import Business.Person.Person;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author aakrutinirmal
 */
public class AssignCaregiverJPanel extends javax.swing.JPanel {
    private EcoSystem ecosystem;
    private Organization organization;
    private JPanel userProcessContainer;
    private Patient patient;
    private ArrayList<Person> p1;
    private Enterprise enterprise;
    
    /**
     * Creates new form AssignCaregiverJPanel
     */
    public AssignCaregiverJPanel(JPanel userProcessContainer, EcoSystem ecosystem,Enterprise enterprise,Organization organization,Person person) {
        initComponents();
          this.userProcessContainer = userProcessContainer;
          this.organization=organization;
          this.ecosystem = ecosystem;
          this.enterprise=enterprise;
          this.patient=(Patient)person;
               p1=new ArrayList<>();
                 for (Network n : ecosystem.getNetworkList()) {
            for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                 if( enterprise.getOrganizationName().equalsIgnoreCase(e.getOrganizationName())){
                populatePersonsTable(e.getPersonDirectory().getPersonHistory());
                 }
            }
        }
         
        
    }
        private void populatePersonsTable(ArrayList<Person> personList) {
           
        DefaultTableModel model = (DefaultTableModel) caregiverJTable.getModel();
        model.setRowCount(0);
        if (personList.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No Persons found. Please add Persons", "Warning", JOptionPane.INFORMATION_MESSAGE);
            return;
        }  
        for (Network n : ecosystem.getNetworkList()) {
            for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                for (Organization org : e.getOrganizationDirectory().getOrganizationList()) {
                    if (org instanceof PatientOrganization) {
                        for (Patient patient : org.getPersonDirectory().getPatientDirectory().getPatientDirectory()) {
                             p1.add((Person)patient);
//                            Object[] row = new Object[3];
//                            row[0] = patient.getPersonName();
//                            row[1] = patient.getAge();
//                            if (patient.getPatientID() != null) {
//                                row[2] = patient.getPatientID();
//                            } else {
//                                row[2] = "Patient Not Created";
//                            }
//                            model.addRow(row);
                        }
                    } 
            
                        if (org instanceof FamilyMemberOrganization) {
                        
                        for (Person person : org.getPersonDirectory().getPersonHistory()) {
                            int count=0;
                            if(p1.size()>0){
                             for(Person p:p1){
                              if(p.getPersonName().equals(person.getPersonName()))
                              {
                                  count=1;
                              }
                             }
                            }
                          if(count==0){
                            Object[] row = new Object[3];
                            row[0] = person;
                            row[1] = person.getAge();
                            row[2] = "Patient Not Created";
                            model.addRow(row);
                          }
                     
                    }
                }
            }

        }
        }  
       
       
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        caregiverJTable = new javax.swing.JTable();
        createCaregiverjButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createMatteBorder(10, 10, 10, 10, new java.awt.Color(0, 0, 0)));
        setPreferredSize(new java.awt.Dimension(1000, 600));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Assign Caregiver");

        caregiverJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Person Name", "Age", "Patient ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(caregiverJTable);

        createCaregiverjButton.setText("Create Caregiver");
        createCaregiverjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createCaregiverjButtonActionPerformed(evt);
            }
        });

        backJButton.setText("<<Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(132, 132, 132)
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(createCaregiverjButton)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backJButton)
                    .addComponent(createCaregiverjButton))
                .addGap(29, 29, 29))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void createCaregiverjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createCaregiverjButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = caregiverJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from table.", "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Person person = (Person) caregiverJTable.getValueAt(selectedRow, 0);
        
        if (person instanceof Person) {
        DisplayCaregiverJPanel displayCaregiverJPanel = new DisplayCaregiverJPanel(userProcessContainer, ecosystem, enterprise,organization, person,patient);
        userProcessContainer.add("AssignCaregiverJPanel", displayCaregiverJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
      
        }         
         else{
           
         JOptionPane.showMessageDialog(this, "A Patient cannot be assigned as a Caregiver!!! Choose another family member .", "Error", JOptionPane.OK_OPTION);
            return;
         
         }
    }//GEN-LAST:event_createCaregiverjButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JTable caregiverJTable;
    private javax.swing.JButton createCaregiverjButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
